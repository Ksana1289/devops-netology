Домашнее задание к занятию "3.3. Операционные системы. Лекция 1"
1.	Какой системный вызов делает команда cd?
В прошлом ДЗ мы выяснили, что cd не является самостоятельной программой, это shell builtin, поэтому запустить strace непосредственно на cd не получится. Тем не менее, вы можете запустить strace на /bin/bash -c 'cd /tmp'. 
В этом случае вы увидите полный список системных вызовов, которые делает сам bash при старте.
Вам нужно найти тот единственный, который относится именно к cd. Обратите внимание, что strace выдаёт результат своей работы в поток stderr, а не в stdout.

chdir("/tmp")

2.	Попробуйте использовать команду file на объекты разных типов в файловой системе. Например:
vagrant@netology1:~$ file /dev/tty
/dev/tty: character special (5/0)
vagrant@netology1:~$ file /dev/sda
/dev/sda: block special (8/0)
vagrant@netology1:~$ file /bin/bash
/bin/bash: ELF 64-bit LSB shared object, x86-64
Используя strace выясните, где находится база данных file, на основании которой она делает свои догадки.

openat(AT_FDCWD, "/usr/share/misc/magic.mgc", O_RDONLY) = 3

3.	Предположим, приложение пишет лог в текстовый файл. Этот файл оказался удален (deleted в lsof), однако возможности сигналом сказать приложению переоткрыть файлы или просто перезапустить приложение – нет. 
Так как приложение продолжает писать в удаленный файл, место на диске постепенно заканчивается. Основываясь на знаниях о перенаправлении потоков предложите способ обнуления открытого удаленного файла 
(чтобы освободить место на файловой системе).

По pid процесса, который держит файл, выяснить его дескрипторы.
В дескриптор отправить пустую строку, например, echo '' > /proc/123456/fd/3

4.	Занимают ли зомби-процессы какие-то ресурсы в ОС (CPU, RAM, IO)?

Нет. Когда процесс завершается через exit, вся память и связанные с ним ресурсы освобождаются, чтобы их могли использовать другие процессы.

5.	В iovisor BCC есть утилита opensnoop:
root@vagrant:~# dpkg -L bpfcc-tools | grep sbin/opensnoop
/usr/sbin/opensnoop-bpfcc
На какие файлы вы увидели вызовы группы open за первую секунду работы утилиты? Воспользуйтесь пакетом bpfcc-tools для Ubuntu 20.04. Дополнительные сведения по установке.

sudo /usr/sbin/opensnoop-bpfcc -d 1
PID    COMM               FD ERR PATH
714    vminfo              4   0 /var/run/utmp
606    dbus-daemon        -1   2 /usr/local/share/dbus-1/system-services
606    dbus-daemon        22   0 /usr/share/dbus-1/system-services
606    dbus-daemon        -1   2 /lib/dbus-1/system-services
606    dbus-daemon        22   0 /var/lib/snapd/dbus-1/system-services/

6.	Какой системный вызов использует uname -a? Приведите цитату из man по этому системному вызову, где описывается альтернативное местоположение в /proc, где можно узнать версию ядра и релиз ОС.

Part of the utsname information is also accessible via /proc/sys/kernel/{ostype, hostname, osrelease, version, domainname}

7.	Чем отличается последовательность команд через ; и через && в bash? Например:
root@netology1:~# test -d /tmp/some_dir; echo Hi
Hi
root@netology1:~# test -d /tmp/some_dir && echo Hi
root@netology1:~#
Есть ли смысл использовать в bash &&, если применить set -e?

Последовательность команд через ;  - это просто последовательное выполнение команд, вне зависимости от результатов предыдущей команды. Если запустить их через &&, 
то команда 2 будет выполнена только в случае успешного завершения команды 1.
C set -e скрипт не упадёт, если ошибкой завершится команда выполненная в конструкции с оператором &&.

8.	Из каких опций состоит режим bash set -euxo pipefail и почему его хорошо было бы использовать в сценариях?

-e прерывает выполнение исполнения при ошибке любой команды кроме последней в последовательности;
-x вывод трейса простых команд;
-u неустановленные/не заданные параметры и переменные считаются как ошибки, с выводом в stderr текста ошибки и выполнит завершение не интерактивного вызова;
-o pipefail возвращает код возврата набора/последовательности команд, ненулевой при последней команды или 0 для успешного выполнения команд.
Повышает детализацию вывода ошибок и завершит сценарий при наличии ошибок, на любом этапе выполнения сценария, кроме последней завершающей команды.

9.	Используя -o stat для ps, определите, какой наиболее часто встречающийся статус у процессов в системе. В man ps ознакомьтесь (/PROCESS STATE CODES) 
что значат дополнительные к основной заглавной буквы статуса процессов. Его можно не учитывать при расчете (считать S, Ss или Ssl равнозначными).

ps -Ao stat  | sort | uniq -c | sort -r
     39 I<
     24 S
     14 Ss
      9 Ssl
      7 I
      4 S<
      3 S+
      2 Ss+
      2 SN
      1 Sl
      1 STAT
      1 SLsl
      1 S<s
      1 R+
