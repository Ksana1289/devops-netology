Домашнее задание к занятию "3.2. Работа в терминале. Лекция 2"

1.	Какого типа команда cd? Попробуйте объяснить, почему она именно такого типа: опишите ход своих мыслей, если считаете, что она могла бы быть другого типа.

type cd
cd is a shell builtin
Во всех случаях является встроенной командой, так как смена текущей директории в рамках дочернего процесса не приведет ни к каким последствиям на уровне командной оболочки.

2.	Какая альтернатива без pipe команде grep <some_string> <some_file> | wc -l?

Если нужно просто узнать количество строк с совпадениями:
cat myfile
текст мяу мяу
текст
текст
grep текс myfile | wc -l
3
grep -c текс myfile
3

3.	Какой процесс с PID 1 является родителем для всех процессов в вашей виртуальной машине Ubuntu 20.04?

Это можно определить тремя способами:
pstree -a -p | head -n 1
systemd,1

sudo ls -l /proc/1/exe
lrwxrwxrwx 1 root root 0 Oct 23 21:00 /proc/1/exe -> /usr/lib/systemd/system

ps -F 1
UID          PID    PPID  C    SZ   RSS PSR STIME TTY      STAT   TIME CMD
root           1       0  0 42295 12732   1 21:00 ?        Ss     0:03 /sbin/init
ls -l /sbin/init
lrwxrwxrwx 1 root root 20 Aug 31 15:27 /sbin/init -> /lib/systemd/system

4.	Как будет выглядеть команда, которая перенаправит вывод stderr ls на другую сессию терминала?

Проверка открытых терминалов
w
 22:24:55 up  1:24,  3 users,  load average: 0.00, 0.01, 0.00
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
user     tty1     -                22:06   16:57   0.07s  0.03s -bash
vagrant  pts/0    10.0.2.2         22:05    1.00s  0.11s  0.00s w
vagrant  pts/1    10.0.2.2         22:10    7.00s  0.10s  0.02s sshd: vagrant [priv]

Смотрим номер своего терминала:
tty
/dev/pts/0

ls куку 2>/dev/pts/1
ls: cannot access 'куку': No such file or directory – появляется в другом терминале

5.	Получится ли одновременно передать команде файл на stdin и вывести ее stdout в другой файл? Приведите работающий пример.

ls /dev > list | grep -n 'tty*' list  | tee tty_list
61:tty
62:tty0
63:tty1
64:tty10
65:tty11
66:tty12
……
158:ttyprintk

Решение:
cat <tty_list >tty_list_out
cat tty_list_out
61:tty
62:tty0
63:tty1
64:tty10
65:tty11
66:tty12
……
158:ttyprintk

6.	Получится ли, находясь в графическом режиме, вывести данные из PTY в какой-либо из эмуляторов TTY? Сможете ли вы наблюдать выводимые данные?

echo 'connection message' > /dev/tty1
Да, но для этого нужно быть авторизованным на этом терминале.

7.	Выполните команду bash 5>&1. К чему она приведет? Что будет, если вы выполните echo netology > /proc/$$/fd/5? Почему так происходит?

Команда bash 5>&1 создает новый дескритор 5 и связывает его со стандартным дескриптором вывода 1. Теперь если выполнить echo netology > /proc/$$/fd/5, 
то bash продублирует вывод команды echo на стандартное устройство вывода.

8.	Получится ли в качестве входного потока для pipe использовать только stderr команды, не потеряв при этом отображение stdout на pty?

ls -l /root 9>&2 2>&1 1>&9 |grep denied -c 
1
6>&2 - новый дескриптор перенаправили в stderr
2>&1 - stderr перенаправили в stdout 
1>&6 - stdout - перенаправили в новый дескриптор

9.	Что выведет команда cat /proc/$$/environ? Как еще можно получить аналогичный по содержанию вывод?

Команда выведет набор переменных окружения. Похожий вывод можно получить, используя команды env и printenv.

10.	Используя man, опишите что доступно по адресам /proc/<PID>/cmdline, /proc/<PID>/exe.

/proc/<PID>/cmdline выведет команду, к которой относится, со всеми аргументами, разделёнными специальными символом '\x0' (это не пробел, cat файла выведет всё "слипнувшимся").
/proc/<PID>/exe это симлинк на полный путь к исполняемому файлу, из которого вызвана программа с этим пидом.

11.	Узнайте, какую наиболее старшую версию набора инструкций SSE поддерживает ваш процессор с помощью /proc/cpuinfo.

SSE 4.2
cat /proc/cpuinfo  | grep -o 'sse[0-9_]*' | sort -h | uniq
sse
sse2
sse3
sse4_1
sse4_2

12.	При открытии нового окна терминала и vagrant ssh создается новая сессия и выделяется pty. Это можно подтвердить командой tty, которая упоминалась в лекции 3.2.
Однако:
     vagrant@netology1:~$ ssh localhost 'tty'
not a tty
Почему так происходит, и как изменить поведение.
При отправке команд по ssh терминал по умолчанию не создаётся, поэтому мы получаем такую ошибку. Принудительно создать tty можно при помощи ключа -t, 
в таком случае команда создает tty и показывает его номер:
ssh -t localhost 'tty'
vagrant@localhost's password:
/dev/pts/1
Connection to localhost closed.

13.	Бывает, что есть необходимость переместить запущенный процесс из одной сессии в другую. Попробуйте сделать это, воспользовавшись reptyr. Например, 
так можно перенести в screen процесс, который вы запустили по ошибке в обычной SSH-сессии.

При первых запусках ругался на права:
Unable to attach to pid 4854: Operation not permitted
The kernel denied permission while attaching. If your uid matches
the target's, check the value of /proc/sys/kernel/yama/ptrace_scope.
For more information, see /etc/sysctl.d/10-ptrace.conf
После установки заначения kernel.yama.ptrace_scope = 0, процесс был перехвачен в screen, и продолжил работу после закрытия терминала. 

14.	sudo echo string > /root/new_file не даст выполнить перенаправление под обычным пользователем, так как перенаправлением занимается процесс shell'а, 
который запущен без sudo под вашим пользователем. Для решения данной проблемы можно использовать конструкцию echo string | sudo tee /root/new_file. Узнайте, 
что делает команда tee и почему в отличие от sudo echo команда с sudo tee будет работать.

Команда tee делает вывод одновременно и в файл, указанный в качестве параметра, и в stdout. В данном примере команда получает вывод из stdin, перенаправленный 
через pipe от stdout команды echo и т.к. команда запущена от sudo, соответственно имеет повышенны
